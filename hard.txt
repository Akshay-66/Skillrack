//Find next greater number with same set of digit
#include <bits/stdc++.h>
 
using namespace std;

int nxt(int num[1000], int n) {
    int i,j,s=0,x,smallest=0;
    for(i=n-1; i>0; i--) {
        if(num[i] > num[i-1]) {
            break;
        }
    }
    if (i==1 && (num[i] <= num[i-1])) {
        return 0;
    }
    x = num[i-1];
    smallest = i;
    for (j=i+1; j<n; j++) {
        if (num[j] > x && num[j] < num[smallest]) {
            smallest = j;
        }
    }
    int q = num[i-1];
    num[i-1] = num[smallest];
    num[smallest] = q;
    x = 0;
    for (j=0; j<i; j++) {
        x = x*10 + num[j];
    }
    for(int k = i; k<n; k++) {
        for (j=k+1; j<n; j++) {
            if(num[k] > num[j]) {
                int r = num[k];
                num[k] = num[j];
                num[j] = r;
            }
        }
    }
    for (j=i; j<n; j++) {
        x = x*10 + num[j];
    }
    cout << x;
}
int main(int argc, char** argv)
{
    int a,x[1000],y[1000],s=0,t=0,r=0,i,j;
    cin >> a;
    while(a>0) {
        x[s] = a%10;
        a /= 10;
        s++;
    }
    r = s-1;
    for (i=0; i<s; i++) {
        y[r] = x[i];
        r--;
    }
    nxt(y,s);
}



//Accenture

def ck(mat,e,i,j,a,b) :
    if i==0 and j==0:
        if mat[i+1][j] <= e and mat[i][j+1] <= e and mat[i+1][j+1] <= e:
            return 1
    elif i==0 and j==b-1:
        if mat[i][j-1]<=e and mat[i+1][j-1]<=e and mat[i+1][j] <=e:
            return 1
    elif i==a-1 and j==0:
        if mat[i-1][j] <= e and mat[i][j+1] <= e and mat[i-1][j+1] <= e:
            return 1
    elif i==a-1 and j==b-1:
        if mat[i-1][j] <= e and mat[i][j-1] <=e and mat[i-1][j-1] <= e:
            return 1
    elif i==0:
        if mat[i][j-1] <= e and mat[i][j+1] <= e and mat[i+1][j-1] <= e and mat[i+1][j+1] <= e and mat[i+1][j] <= e:
            return 1
    elif i==a-1:
        if mat[i][j-1] <= e and mat[i][j+1] <= e and mat[i-1][j-1] <= e and mat[i-1][j+1] <=e and mat[i-1][j] <= e:
            return 1
    elif j==0:
        if mat[i-1][j] <= e and mat[i+1][j] <= e and mat[i-1][j+1] <= e and mat[i][j+1] <= e and mat[i+1][j+1] <= e:
            return 1
    elif j==b-1:
        if mat[i-1][j] <= e and mat[i+1][j] <= e and mat[i-1][j-1] <= e and mat[i][j-1] <= e and mat[i+1][j-1] <= e:
            return 1
    else:
        if mat[i-1][j-1] < e and mat[i-1][j] < e and mat[i-1][j+1] < e and mat[i][j+1] < e and mat[i+1][j+1] < e and mat[i+1][j] < e and mat[i+1][j-1] < e and mat[i][j-1] < e:
            return 1
    return 0
a,b = map(int,input().strip().split())
mat = []
for i in range(a):
    ro = list(map(int,input().strip().split()))
    mat.append(ro)
s = 0
for i in range(a):
    for j in range(b):
        e = mat[i][j]
        if ck(mat,e,i,j,a,b) == 1:
            s += 1
print(s)




//C++ Advanced 3rd Amazon

#include <bits/stdc++.h>
 
using namespace std;

int main(int argc, char** argv)
{
    int i,j,s=0,q=0,aa[100],bb[100],q1=0,q2=0,ss=100;
    char x[1000],y[1000],a[1000][1000],b[1000],z[1000];
    string zz;
    getline(cin,zz);
    cin >> x;
    cin >> y;
    strncpy(z,zz.c_str(), sizeof(z)-1);
    z[sizeof(z)-1] = '\0';
    for(i=0; i<strlen(z); i++){
        if(z[i]!=' '){
            b[s] = z[i];
            s++;
        }else {
            s = 0;
            strcpy(a[q],b);
            q++;
            memset(b,0,sizeof(b));
        }
    }
    for(i=0; i<q; i++) {
        if(strcmp(a[i],x)==0) {
            aa[q1] = i;
            q1++;
        }
        if(strcmp(a[i],y)==0) {
            bb[q2] = i;
            q2++;
        }
    }
    for(i=0; i<q1; i++) {
        for(j=0; j<q2; j++) {
            if(abs(aa[i]-bb[j])<ss && abs(aa[i]-bb[j])!=0) {
                ss = abs(aa[i]-bb[j]);
            }
        }
    }
    cout << ss;
}